#return the input matrix
get <- function() x
#cache the inverse
setinverse <- function(inv) inverse <<- inv
#return the inverse
getinverse <- function() inverse
#return the list object
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cm <- makeCacheMatrix(mx4)
cm$get()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
cm$set(mx1)
cacheSolve(cm)
cm <- makeCacheMatrix(mx1)
cm$get()
cm$set(mx4)
cm$get()
mx1==mx4
all(mx1==mx4)
makeCacheMatrix <- function(x = matrix()) {
#initialize the inverse
inverse <- NULL
#set the matrix x to be used to calculate the inverse
#everytime x is reset, the inverse is reset to null
set <- function(y) {
#if every element of y is the same as every elemnt of x,
#there is no need to initialize or set the inverse to null.
if(!(all(x==y))) {
x <<- y
inverse <<- NULL
} else {
message("all elements in the matrix are the same")
}
}
#return the input matrix
get <- function() x
#cache the inverse
setinverse <- function(inv) inverse <<- inv
#return the inverse
getinverse <- function() inverse
#return the list object
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cm <- makeCacheMatrix(mx1)
cm$get()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
cm$set(mx4)
cacheSolve(cm)
## This R script contains 2 key functions
## makeCacheMatrix: returns a list object that store the inverse of a matrix
## cacheSolve: returns the inverse of a matrix. The inverse could come from
##          cache or calcuated.
## create a few example matrices for testing
x1 <- 1:4
mx1 <- matrix(x, 2)
solve(mx1)
x2 <- 2:5
mx2 <- matrix(x, 2)
solve(mx2)
x3 <- 3:6
mx3 <- matrix(x, 2)
solve(mx3)
x4 <- 1:4
mx4 <- matrix(x, 2)
solve(mx4)
makeCacheMatrix <- function(x = matrix()) {
#initialize the inverse
inverse <- NULL
#set the matrix x to be used to calculate the inverse
#everytime x is reset, the inverse is reset to null
set <- function(y) {
#if every element of y is the same as every elemnt of x,
#there is no need to initialize or set the inverse to null.
if(!( dim(x)==dim(y) && all(x==y) )) {
x <<- y
inverse <<- NULL
} else {
message("all elements in the matrix are the same")
}
}
#return the input matrix
get <- function() x
#cache the inverse
setinverse <- function(inv) inverse <<- inv
#return the inverse
getinverse <- function() inverse
#return the list object
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
## create test object
cm <- makeCacheMatrix(mx1)
cm$get()
## test to see if the function compares 2 matrices correctly
cm$set(mx4)
## calculate the inverse of x
cacheSolve(cm)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
x1 <- 1:4
mx1 <- matrix(x, 2)
mx1 <- matrix(x1, 2)
io <- makeCacheMatrix(mx1)
cacheSolve(io)
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
message("test")
m <- solve(data, ...)
x$setmatrix(m)
m
}
x1 <- 1:4
mx1 <- matrix(x1, 2)
io <- makeCacheMatrix(mx1)
cacheSolve(io)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "8293009cc87a4176add2",
secret = "f22cee1a240a2e77beba423c3f4db7b5ac0af997")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "8293009cc87a4176add2",
secret = "f22cee1a240a2e77beba423c3f4db7b5ac0af997")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "8293009cc87a4176add2",
secret = "f22cee1a240a2e77beba423c3f4db7b5ac0af997")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "8293009cc87a4176add2",
secret = "cca2f760fb71f3c1b4addf362bd7c9f653819dfa")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages(httpuv)
install.packages("httpuv")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "8293009cc87a4176add2",
secret = "cca2f760fb71f3c1b4addf362bd7c9f653819dfa")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "8293009cc87a4176add2",
secret = "f15036f13def5c373f8ec34e9dc1ea12ef3f236a")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req
content(req)
stop_for_status(req)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileurl, destfile = "Idaho Housing.csv")
idaho_housing <- read.csv("Idaho Housing.csv")
names(idaho_housing)
strsplit(names(idaho_housing, "wgtp"))
strsplit(names(idaho_housing), "wgtp")
strsplit(names(idaho_housing), "wgtp")[123]
names(idaho_housing)[123]
gdpurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(gdpurl, destfile = "GDP.csv")
gdp <- read.csv("GDP.csv")
names(gdp)
head(gdp)
tail(gdp)
tail(gdp, 20)
tail(gdp, 50)
head(gdp, 50)
gdp <- read.csv("GDP.csv", skip = 4, header = FALSE)
head(gdp, 50)
gdp <- read.csv("GDP.csv", skip = 5, header = FALSE)
head(gdp, 100)
head(gdp, 200)
?read.csv
gdp <- gdp[1:190,]
head(gdp, 200)
gdp <- gdp[1:190, c(1, 2, 4, 5)]
gdp <- read.csv("GDP.csv", skip = 5, header = FALSE)
gdp <- gdp[1:190, c(1, 2, 4, 5)]
head(gdp, 200)
gdp$gdp_num <- as.numeric(gdp$v5)
?grepl
gdp$gdp_num <- as.numeric(gsub(",", "", str_trim(gdp$v5)))
gdp$gdp_num <- as.numeric(gsub(",", "", gdp$v5))
gdp$gdp_num <- gsub(",", "", gdp$v5)
gdp <- read.csv("GDP.csv", skip = 5, header = FALSE)
gdp <- gdp[1:190, c(1, 2, 4, 5)]
head(gdp)
gdp$gdp_num <- gsub(",", "", gdp$V5)
head(gdp)
gdp$gdp_num <- gsub(",", "", str_trim(gdp$V5))
gdp$gdp_num <- as.numeric(gsub(",", "", gdp$V5))
head(gdp)
mean(gdp$gdp_num)
head(gdp)
grep("^United", gdp$V4)
gdp[grep("^United", gdp$V4), ]
gdp[grep("^United$", gdp$V4), ]
gdp[grep("^United*", gdp$V4), ]
gdp[grep("^United", gdp$V4), ]
eduurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(eduurl, destfile = "edu.cs")
edu <- read.csv("edu.csv")
download.file(eduurl, destfile = "edu.csv")
edu <- read.csv("edu.csv")
head(edu)
head(gdp)
edu$Special.Notes
grep("Fiscal year end", edu$Special.Notes)
fye_ind <- grep("Fiscal year end", edu$Special.Notes)
grep("[Jj]une", edu$Special.Notes[fye_ind])
edu$Special.Notes[fye_ind[jun_ind]]
edu$Special.Notes[fye_ind]
(edu$Special.Notes[fye_ind])[jun_ind]
edu$Special.Notes[fye_ind][jun_ind]
fye_itm <- edu$Special.Notes[fye_ind]
fye_itm[jun_ind]
fye_itm
fye_itm[1]
fye_itm[2]
jun_ind
jun_ind <- grep("[Jj]une", edu$Special.Notes[fye_ind])
jun_ind
fye_itm[jun_ind]
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(amzn)
class(amzn)
sampleTimes
as.date(sampleTimes)
as.Date(sampleTimes)
sdat <- as.Date(sampleTimes)
year(sdat)
weekdays(sdat)
table(weekdays(sdat)=="Monday")
years(sdat)
?months
format(sdat, $Y)
format(sdat, %Y)
format(sdat, "%Y")
table(format(sdat, "%Y")=="2015")
table(format(sdat, "%Y")=="2012")
table(format(sdat, "%Y"))
table(weekdays(sdat)=="Monday" & format(sdat, "%Y")=="2012")
setwd("E:/Projects/coursera/Data Science/3 Getting and Cleaning Data/class project/getdata-031-cp")
library(data.table)
?fread
test <- fread("./UCI HAR Dataset/train/X_train.txt", sep="\n" nrows=10)
test <- fread("./UCI HAR Dataset/train/X_train.txt", sep="\n", nrows=10)
test
head(test)
dim(test)
test[1]
test[2]
test <- fread("./UCI HAR Dataset/train/X_train.txt", sep="\n")
strsplit(test[1], " ")
strsplit(test[1], split=" ")
class(test[1])
strsplit(test[,1], split=" ")
strsplit(test[1,1], split=" ")
test[1,1]
test[1]
test[1, 2]
test[2]
class(test[2])
strsplit(test[1], split=" ")
strsplit(as.string(test[1]), split=" ")
strsplit(as.character(test[1]), split=" ")
strsplit(as.character(test[1]), split="  ")
substring(test[1:10], seq(1,nchar(x),2), seq(2,nchar(x),2))
substring(test[1:10], seq(1,nchar(test[1]),2), seq(2,nchar(test[1]),2))
substring(test[1:10], seq(1,nchar(test[1]),16), seq(2,nchar(test[1]),16))
substring(test[1:10], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))
seq(1,nchar(test[1]),16)
seq(1, 2, 3)
seq(1, 10, 3)
len(test[1])
len(as.character(test[1]))
dim(as.character(test[1]))
dim(as.character(test[1]))
(as.character(test[1]))
length(as.character(test[1]))
length(as.character(test[1][1]))
size(as.character(test[1]))
nchar(as.character(test[1]))
seq(1,nchar(test[1]),16)
seq(17,nchar(test[1]),16)
substring(test[1:10], seq(1,nchar(test[1]),16), seq(17,nchar(test[1]),16))
substring(test[1:10], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))
x_train <- read.fwf(file="./UCI HAR Dataset/train/X_train.txt",
widths = rep(16, 561), n = 10)
x_train
substring(test[1], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))
x_train[, 1:5]
substring(test[1], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))[, 1:5]
substring(test[1], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))[1:5]
substring(test[1:2], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))[1:5]
substring(test[2], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))[1:5]
test <- fread("./UCI HAR Dataset/train/X_train.txt", header=false, sep="\n")
test <- fread("./UCI HAR Dataset/train/X_train.txt", header=FALSE, sep="\n")
nchar(as.character(test[1]))
nchar(as.character(test[2]))
substring(test[1:2], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))[,1:5]
substring(test[1:2], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))
substring(test[2], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))
substring(test[2], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))[1:5]
substring(test[3], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))[1:5]
x_train[, 1:5]
?read.fwf
dim(test)
substring(test[3, 1], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))[1:5]
substring(test[1:3, 1], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))[1:5]
substring(test[1:3,], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))[1:5]
substring(test[3,], seq(1,nchar(test[1]),16), seq(16,nchar(test[1]),16))[1:5]
substring(test[1:3,], seq(2,nchar(test[1]),16), seq(17,nchar(test[1]),16))[1:5]
substring(test[1:3,], seq(3,nchar(test[1]),16), seq(18,nchar(test[1]),16))[1:5]
substring(test[1:10,], seq(3,nchar(test[1]),16), seq(18,nchar(test[1]),16))[1:5]
substring(test[1:10,], seq(4,nchar(test[1]),16), seq(19,nchar(test[1]),16))[1:5]
x_train[, 1:5]
substring(test[2:10,], seq(4,nchar(test[1]),16), seq(19,nchar(test[1]),16))[1:5]
substring(test, seq(4,nchar(test[1]),16), seq(19,nchar(test[1]),16))[1:5]
s_train <- substring(test, seq(4,nchar(test[1]),16), seq(19,nchar(test[1]),16))
dim(s_train)
class(s_train)
nchars(s_train)
nchar(s_train)
nchar(test)
?read.fwf
x_train <- read.fwf(file="./UCI HAR Dataset/train/X_train.txt",
widths = rep(16, 561), n = 50)
x_train <- read.fwf(file="./UCI HAR Dataset/train/X_train.txt",
widths = rep(16, 561), n = 100)
x_train <- read.fwf(file="./UCI HAR Dataset/train/X_train.txt",
widths = rep(16, 561), buffersize=50, n = 1000)
x_train <- read.fwf(file="./UCI HAR Dataset/train/X_train.txt",
widths = rep(16, 561), buffersize=5, n = 1000)
x_train <- read.fwf(file="./UCI HAR Dataset/train/X_train.txt",
widths = rep(16, 561), buffersize=100)
names(x_train) <- features[,2]
features <- read.fwf("./UCI HAR Dataset/features.txt", widths = c(3, 38))
names(x_train) <- features[,2]
var_type <- rep("train", dim(y_train_set)[1])
y_train_set <- read.table("./UCI HAR Dataset/train/Y_train.txt")
var_type <- rep("train", dim(y_train_set)[1])
train_data <- cbind(var_type, y_train_set, sub_train, x_train)
sub_train <- read.table("./UCI HAR Dataset/train/subject_train.txt", nrows = 100)
train_data <- cbind(var_type, y_train_set, sub_train, x_train)
dim(var_type)
len(var_type)
dim(var_type)
features <- read.fwf("./UCI HAR Dataset/features.txt", widths = c(3, 38))
sub_train <- read.table("./UCI HAR Dataset/train/subject_train.txt", nrows = 100)
names(sub_train) <- c("subject")
sub_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
names(sub_train) <- c("subject")
y_train_set <- read.table("./UCI HAR Dataset/train/Y_train.txt")
names(y_train_set) <- c("y")
train_data <- cbind(var_type, y_train_set, sub_train, x_train)
head(train_data[,1:10])
x_train <- read.fwf(file="./UCI HAR Dataset/train/X_train.txt",
widths = rep(16, 561), buffersize=1000)
names(x_train) <- features[,2]
train_data <- cbind(var_type, y_train_set, sub_train, x_train)
sub_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
names(sub_test) <- c("subject")
y_test_set <- read.table("./UCI HAR Dataset/test/Y_test.txt")
names(y_test_set) <- c("y")
x_test <- read.fwf(file="./UCI HAR Dataset/test/X_test.txt",
widths = rep(16, 561), buffersize=500)
names(x_test) <- features[,2]
var_type <- rep("test", dim(y_test_set)[1])
test_data <- cbind(var_type, y_test_set, sub_test, x_test)
head(test_data[,1:10])
combined <- rbind(train_data, test_data)
col_index <- c(1, 2, 3, grep("mean()", features[,2]) + 3,
grep("std()", features[,2]) + 3)
col_index <- col_index[order(col_index)]
combined <- combined[, col_index]
dim(combined)
head(combined)
s <- split(combined, combined$subject)
mean_by_sub <- sapply(s, function(x) { lapply(x[, 4:82], mean) } )
mean_by_sub <- t(mean_by_sub)
mean_by_sub <- cbind(row.names(mean_by_sub), mean_by_sub)
colnames(mean_by_sub)[1] <- c("subject")
head(mean_by_sub)
write.table(mean_by_sub, file = "./mean_by_sub.txt", append = FALSE)
